{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport * as React from 'react';\nimport MapView from 'react-native-maps';\nimport { Marker, Callout } from 'react-native-maps';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { GooglePlacesAutocomplete } from 'react-native-google-places-autocomplete';\nimport { useState, useEffect } from 'react';\nimport * as Location from 'expo-location';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function App() {\n  useEffect(function () {\n    (function _callee() {\n      var _await$Location$reque, status, location;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(Location.requestForegroundPermissionsAsync());\n\n            case 2:\n              _await$Location$reque = _context.sent;\n              status = _await$Location$reque.status;\n\n              if (!(status !== 'granted')) {\n                _context.next = 7;\n                break;\n              }\n\n              console.log('Permission to access location was denied');\n              return _context.abrupt(\"return\");\n\n            case 7:\n              _context.next = 9;\n              return _regeneratorRuntime.awrap(Location.getCurrentPositionAsync({}));\n\n            case 9:\n              location = _context.sent;\n              console.log(location.coords);\n              setPin({\n                latitude: location.coords.latitude,\n                longitude: location.coords.longitude\n              });\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n  }, []);\n\n  var _useState = useState({\n    latitude: -24.8385129,\n    longitude: -65.4435753\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      pin = _useState2[0],\n      setPin = _useState2[1];\n\n  var _useState3 = useState({\n    latitude: 37.78825,\n    longitude: -122.4324\n  }),\n      _useState4 = _slicedToArray(_useState3, 2),\n      region = _useState4[0],\n      setRegion = _useState4[1];\n\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(GooglePlacesAutocomplete, {\n      placeholder: \"Search\",\n      fetchDetails: true,\n      GooglePlacesSearchQuery: {\n        rankby: \"distance\"\n      },\n      onPress: function onPress(data) {\n        var details = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n        console.log(data, details);\n        setRegion({\n          latitude: details.geometry.location.lat,\n          longitude: details.geometry.location.lng,\n          latitudeDelta: 0.0922,\n          longitudeDelta: 0.0421\n        });\n      },\n      query: {\n        key: 'AIzaSyCctmpoWkqc4Te99YNkI0hgsyVfpbEci5M',\n        language: 'en',\n        components: \"country:arg\",\n        types: \"establishment\",\n        radius: 30000,\n        location: region.latitude + \", \" + region.longitude\n      },\n      styles: {\n        container: {\n          flex: 0,\n          position: \"absolute\",\n          width: \"100%\",\n          zIndex: 1\n        }\n      }\n    }), _jsxs(MapView, {\n      style: StyleSheet.absoluteFill,\n      initialRegion: {\n        latitude: pin.latitude,\n        longitude: pin.longitude,\n        latitudeDelta: 0.0922,\n        longitudeDelta: 0.0421\n      },\n      provider: \"google\",\n      children: [_jsx(Marker, {\n        coordinate: {\n          latitude: region.latitude,\n          longitude: region.longitude\n        },\n        pinColor: \"black\"\n      }), _jsx(Marker, {\n        coordinate: pin,\n        image: require(\"../Components/Utils/puntero.png\"),\n        draggable: true,\n        onDragStart: function onDragStart(e) {\n          console.log(\"Drag Star\", e.nativeEvent.coordinate);\n        },\n        onDragEnd: function onDragEnd(e) {\n          setPin({\n            latitude: e.nativeEvent.coordinate.latitude,\n            longitude: e.nativeEvent.coordinate.longitude\n          });\n        },\n        children: _jsx(Callout, {\n          children: _jsx(Text, {\n            children: \"Estoy Aqui!\"\n          })\n        })\n      })]\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    marginTop: 0,\n    flex: 1\n  },\n  map: {\n    width: Dimensions.get('window').width,\n    height: Dimensions.get('window').height\n  }\n});","map":{"version":3,"sources":["D:/usuario/alexk8uu/Desktop/HENRY 2/LOGIEXPRESS/LOGIEXPRESS/clientnative/Components/ScreenMap.js"],"names":["React","MapView","Marker","Callout","GooglePlacesAutocomplete","useState","useEffect","Location","App","requestForegroundPermissionsAsync","status","console","log","getCurrentPositionAsync","location","coords","setPin","latitude","longitude","pin","region","setRegion","styles","container","rankby","data","details","geometry","lat","lng","latitudeDelta","longitudeDelta","key","language","components","types","radius","flex","position","width","zIndex","StyleSheet","absoluteFill","require","e","nativeEvent","coordinate","create","marginTop","map","Dimensions","get","height"],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport MapView from 'react-native-maps';\r\nimport { Marker, Callout } from 'react-native-maps';\r\nimport { StyleSheet, Text, View, Dimensions } from 'react-native';\r\nimport { GooglePlacesAutocomplete } from 'react-native-google-places-autocomplete';\r\nimport { useState, useEffect } from 'react';\r\nimport * as Location from 'expo-location';\r\n\r\nexport default function App() {\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            let { status } = await Location.requestForegroundPermissionsAsync();\r\n            if (status !== 'granted') {\r\n                console.log('Permission to access location was denied');\r\n                return;\r\n            }\r\n\r\n            let location = await Location.getCurrentPositionAsync({});\r\n            console.log(location.coords);\r\n            setPin({\r\n                latitude: location.coords.latitude,\r\n                longitude: location.coords.longitude,\r\n            })\r\n        })();\r\n    }, []);\r\n\r\n    const [pin, setPin] = useState({\r\n        latitude: -24.8385129,\r\n        longitude:  -65.4435753,\r\n    })\r\n\r\n    const [region, setRegion] = useState({\r\n        latitude: 37.78825,\r\n        longitude: -122.4324,\r\n    })\r\n\r\n\r\n\r\n    return (\r\n        <View style={styles.container}>\r\n            <GooglePlacesAutocomplete\r\n                placeholder='Search'\r\n                fetchDetails={true}\r\n                GooglePlacesSearchQuery={{\r\n                    rankby: \"distance\"\r\n                }}\r\n                onPress={(data, details = null) => {\r\n                    // 'details' is provided when fetchDetails = true\r\n                    console.log(data, details);\r\n                    setRegion({\r\n                        latitude: details.geometry.location.lat,\r\n                        longitude: details.geometry.location.lng,\r\n                        latitudeDelta: 0.0922,\r\n                        longitudeDelta: 0.0421,\r\n                    })\r\n                }}\r\n                query={{\r\n                    key: 'AIzaSyCctmpoWkqc4Te99YNkI0hgsyVfpbEci5M',\r\n                    language: 'en',\r\n                    components: \"country:arg\",\r\n                    types: \"establishment\",\r\n                    radius: 30000,\r\n                    location: `${region.latitude}, ${region.longitude}`\r\n                }}\r\n                styles={{\r\n                    container: { flex: 0, position: \"absolute\", width: \"100%\", zIndex: 1 }\r\n                }}\r\n            />\r\n            <MapView style={StyleSheet.absoluteFill}\r\n                initialRegion={{\r\n                    latitude: pin.latitude,\r\n                    longitude: pin.longitude,\r\n                    latitudeDelta: 0.0922,\r\n                    longitudeDelta: 0.0421,\r\n                }}\r\n                provider=\"google\"\r\n            >\r\n                {\r\n                    <Marker coordinate={{\r\n                        latitude: region.latitude,\r\n                        longitude: region.longitude,\r\n                    }}\r\n                    pinColor='black' />\r\n                }\r\n                {\r\n                    <Marker\r\n                        coordinate={pin}\r\n                        image={require('../Components/Utils/puntero.png')}\r\n                        draggable={true}\r\n                        onDragStart={(e) => {\r\n                            console.log(\"Drag Star\", e.nativeEvent.coordinate)\r\n                        }}\r\n                        onDragEnd={(e) => {\r\n                            setPin({\r\n                                latitude: e.nativeEvent.coordinate.latitude,\r\n                                longitude: e.nativeEvent.coordinate.longitude\r\n                            })\r\n                        }}\r\n                    >\r\n                        <Callout>\r\n                            <Text>Estoy Aqui!</Text>\r\n                        </Callout>\r\n                    </Marker>\r\n                }\r\n            </MapView>\r\n        </View>\r\n    );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        marginTop: 0, flex: 1\r\n    },\r\n    map: {\r\n        width: Dimensions.get('window').width,\r\n        height: Dimensions.get('window').height,\r\n    },\r\n});"]},"metadata":{},"sourceType":"module"}